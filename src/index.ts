  import express from "express";
  import cors from "cors";
  import { AppDataSource } from "./config/database";
  import usuarioRoutes from "./routes/usuarioRoutes";
  import estacaoRoutes from "./routes/estacaoRoutes";
  import medidasRoutes from "./routes/medidasRoutes";
  import tipoParametroRoutes from "./routes/tipoParametroRoutes";
  import dotenv from "dotenv";
  import { checkAndCreateDatabase } from "./config/database"; // Importe a funÃ§Ã£o de verificaÃ§Ã£o/criaÃ§Ã£o do banco de dados
  
  dotenv.config();
  
  const app = express();
  app.use(cors());
  app.use(express.json());
  app.use("/api", usuarioRoutes);
  app.use("/api", estacaoRoutes);
  app.use("/api", medidasRoutes)
  app.use("/api", tipoParametroRoutes)
  const PORT = process.env.PORT || 3000;
  
  // FunÃ§Ã£o principal que aguarda a verificaÃ§Ã£o e criaÃ§Ã£o do banco
  const startServer = async () => {
    try {
      // Verifique e crie o banco de dados, se necessÃ¡rio
      await checkAndCreateDatabase();
  
      // Inicialize o TypeORM apÃ³s a criaÃ§Ã£o/verificaÃ§Ã£o do banco
      await AppDataSource.initialize();
      console.log("ðŸ”¥ Conectado ao banco de dados com sucesso!");
  
      // Inicie o servidor Express
      app.listen(PORT, () => console.log(`ðŸš€ Servidor rodando na porta ${PORT}`));
    } catch (error) {
      console.error("Erro ao conectar ao banco:", error);
    }
  };
  
  // Inicie o servidor
  startServer();
  